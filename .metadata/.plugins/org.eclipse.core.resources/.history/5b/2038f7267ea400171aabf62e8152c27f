
public class WordGram implements Comparable<WordGram>{
	
	private String[] myWords;
	private int myHash;
	
	public WordGram(String[] words, int index, int size) {
		// complete this constructor
		myWords=new String[size];
		int hash=0;
		for (int i=0;i<size;i++){
			myWords[i]=words[i+index];
			myHash=myHash+(int)Math.pow(17, i)*myWords[i].hashCode();
		}	
	}
	
	@Override
	public int hashCode() {
		return myHash;
	}
	
	@Override
	public String toString() {
		String.join(" ", myWords);
		return null;
	}
	
	@Override
	public boolean equals(Object other) {
		if (other == null || ! (other instanceof WordGram)) {
			return false;
		}
		WordGram wg=(WordGram) other;
		if(!(this.length()==wg.length())){
			return false;
		}
		for(int j=0;j<this.myWords.length;j++){
			if(!(this.myWords[j].equals(wg.myWords[j]))){
				return false;
			}
		}
		return true;
	}
	
	@Override
	public int compareTo(WordGram wg) {
		return -1;
	}
	
	public int length() {
		return this.myWords.length;
	}
	
	public WordGram shiftAdd(String last) {
		String[] shift=new String[myWords.length];
		for(int i=0;i<myWords.length;i++){
			if(i==myWords.length-1){
				shift[i]=last;
			}else{
			shift[i]=this.myWords[i+1];
			}
		}
		return new WordGram(shift,0,myWords.length);
	}
}
